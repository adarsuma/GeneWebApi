//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneWeb.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeneEntities : DbContext
    {
        public GeneEntities()
            : base("name=GeneEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Sample> Samples { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int sp_CreateSample(string barcode, string createdat, Nullable<int> userid, Nullable<int> statusid)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var createdatParameter = createdat != null ?
                new ObjectParameter("createdat", createdat) :
                new ObjectParameter("createdat", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateSample", barcodeParameter, createdatParameter, useridParameter, statusidParameter);
        }
    
        public virtual ObjectResult<sp_GetAllSamplesByStatus_Result> sp_GetAllSamplesByStatus(string status)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSamplesByStatus_Result>("sp_GetAllSamplesByStatus", statusParameter);
        }
    
        public virtual ObjectResult<sp_GetAllSamplesByUser_Result> sp_GetAllSamplesByUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSamplesByUser_Result>("sp_GetAllSamplesByUser", usernameParameter);
        }
    
        public virtual ObjectResult<sp_GetAllSamples_Result> sp_GetAllSamples()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSamples_Result>("sp_GetAllSamples");
        }
    }
}
